{
  "name": "refactor-optimize",
  "description": "Refactor module while maintaining test coverage",
  "workflow": "workflow/performance_workflow.md",
  "agent": "agents/performance_agent.md",
  "parameters": {
    "module": {
      "type": "string",
      "description": "Module to refactor",
      "required": true,
      "values": ["crypto", "dag", "network", "protocol"]
    },
    "focus": {
      "type": "string",
      "description": "Optional focus area (performance, security, readability)",
      "required": false,
      "values": ["performance", "security", "readability", "maintainability"]
    },
    "strategies": {
      "type": "array",
      "description": "Specific optimization strategies to apply",
      "required": false,
      "values": [
        "async_optimization",
        "memory_reduction",
        "lock_elimination",
        "batch_processing",
        "cache_locality",
        "algorithmic_improvement"
      ]
    },
    "preserve_api": {
      "type": "boolean",
      "description": "Maintain existing public API",
      "required": false,
      "default": true
    }
  },
  "examples": [
    "/refactor-optimize crypto",
    "/refactor-optimize network --focus performance",
    "/refactor-optimize dag --focus security",
    "/refactor-optimize protocol --strategies async_optimization,memory_reduction",
    "/refactor-optimize crypto --focus performance --preserve_api false"
  ],
  "optimization_patterns": {
    "async_optimization": {
      "techniques": [
        "tokio::spawn for CPU-bound tasks",
        "buffered channels for backpressure",
        "select! for concurrent operations",
        "FuturesUnordered for parallel execution"
      ],
      "metrics": ["task_throughput", "latency_reduction", "cpu_utilization"]
    },
    "memory_reduction": {
      "techniques": [
        "arena allocators for temporary data",
        "object pooling for frequent allocations",
        "compact data structures",
        "lazy initialization"
      ],
      "metrics": ["heap_usage", "allocation_rate", "gc_pressure"]
    },
    "lock_elimination": {
      "techniques": [
        "lock-free data structures",
        "RCU patterns",
        "message passing instead of shared state",
        "fine-grained locking"
      ],
      "metrics": ["contention_rate", "wait_time", "throughput"]
    }
  },
  "output": {
    "success": "Refactoring results and optimization metrics",
    "format": [
      "1. Code Changes",
      "2. Test Coverage",
      "3. Performance Impact",
      "4. Security Impact",
      "5. Documentation Updates",
      "6. Before/After Metrics",
      "7. API Compatibility Report",
      "8. Risk Assessment"
    ],
    "metrics": {
      "performance": {
        "throughput_change": "percentage",
        "latency_change": "percentage",
        "memory_change": "percentage"
      },
      "quality": {
        "cyclomatic_complexity": "before/after",
        "code_coverage": "percentage",
        "unsafe_blocks": "count"
      }
    }
  },
  "validation_steps": [
    "run_unit_tests",
    "run_integration_tests",
    "run_benchmarks",
    "check_api_compatibility",
    "security_audit",
    "performance_regression_check"
  ],
  "error_handling": {
    "invalid_module": "List of valid module names",
    "test_regression": "Failed tests after refactoring",
    "performance_regression": "Performance degradation warning"
  }
}