{
  "name": "deploy-validate",
  "description": "Validate deployment configuration and execute comprehensive deployment tests",
  "parameters": {
    "environment": {
      "type": "string",
      "description": "Target environment (dev, staging, prod)",
      "required": false,
      "default": "dev"
    },
    "run_tests": {
      "type": "boolean",
      "description": "Run full test suite before deployment",
      "required": false,
      "default": true
    },
    "security_audit": {
      "type": "boolean",
      "description": "Perform security audit",
      "required": false,
      "default": true
    },
    "performance_check": {
      "type": "boolean",
      "description": "Verify performance benchmarks",
      "required": false,
      "default": true
    }
  },
  "workflow_reference": "workflow/deployment_workflow.md",
  "validation_criteria": {
    "dev": {
      "tests": {
        "unit_tests": "Required - All must pass",
        "integration_tests": "Required - Core tests must pass",
        "security_tests": "Optional - Run if available",
        "performance_tests": "Optional - Baseline only"
      },
      "checks": {
        "configuration": "Basic validation",
        "dependencies": "Version compatibility",
        "resources": "Minimal requirements",
        "network": "Local connectivity"
      },
      "requirements": {
        "test_coverage": ">=80%",
        "security_score": ">=7/10",
        "performance_baseline": "Established"
      }
    },
    "staging": {
      "tests": {
        "unit_tests": "Required - 100% pass rate",
        "integration_tests": "Required - All must pass",
        "security_tests": "Required - All must pass",
        "performance_tests": "Required - Meet targets",
        "load_tests": "Required - Handle expected load"
      },
      "checks": {
        "configuration": "Full validation with secrets",
        "dependencies": "Production versions",
        "resources": "Production-like specs",
        "network": "Multi-node testing",
        "monitoring": "Metrics collection enabled"
      },
      "requirements": {
        "test_coverage": ">=90%",
        "security_score": ">=9/10",
        "performance_targets": "Met or exceeded",
        "load_capacity": "2x expected traffic"
      }
    },
    "prod": {
      "tests": {
        "unit_tests": "Required - 100% pass rate",
        "integration_tests": "Required - All must pass",
        "security_tests": "Required - All must pass",
        "performance_tests": "Required - Exceed targets",
        "load_tests": "Required - 3x capacity",
        "chaos_tests": "Required - Resilience verified"
      },
      "checks": {
        "configuration": "Production-ready with backups",
        "dependencies": "Locked versions",
        "resources": "Auto-scaling configured",
        "network": "Load balancing ready",
        "monitoring": "Full observability",
        "rollback": "Tested and ready",
        "documentation": "Complete and current"
      },
      "requirements": {
        "test_coverage": ">=95%",
        "security_score": "10/10",
        "performance_targets": "Exceeded by 20%",
        "load_capacity": "3x expected traffic",
        "zero_downtime": "Blue-green deployment ready",
        "disaster_recovery": "RTO < 15 minutes"
      }
    }
  },
  "deployment_checklist": {
    "pre_deployment": [
      "All tests passing",
      "Security audit completed",
      "Performance benchmarks met",
      "Configuration validated",
      "Rollback plan tested",
      "Monitoring configured",
      "Documentation updated"
    ],
    "deployment": [
      "Health checks passing",
      "Gradual rollout started",
      "Metrics within bounds",
      "No error spike detected",
      "User traffic normal"
    ],
    "post_deployment": [
      "All services healthy",
      "Performance nominal",
      "No security alerts",
      "User feedback positive",
      "Logs clean"
    ]
  },
  "validation_steps": [
    {
      "name": "Configuration Validation",
      "commands": [
        "cargo build --release",
        "cargo test --all-features",
        "./scripts/validate_config.sh ${environment}"
      ]
    },
    {
      "name": "Security Validation",
      "commands": [
        "cargo audit",
        "cargo fuzz run crypto_fuzz -- -max_total_time=60",
        "./scripts/security_scan.sh"
      ]
    },
    {
      "name": "Performance Validation",
      "commands": [
        "cargo bench --bench '*'",
        "./scripts/performance_check.sh ${environment}",
        "python3 scripts/analyze_benchmarks.py"
      ]
    },
    {
      "name": "Integration Validation",
      "commands": [
        "cargo test --test '*integration*'",
        "./tools/simulator/run_scenarios.sh",
        "docker-compose -f docker-compose.test.yml up --abort-on-container-exit"
      ]
    }
  ],
  "examples": [
    "/deploy-validate",
    "/deploy-validate --environment staging --run_tests true",
    "/deploy-validate --environment prod --security_audit true --performance_check true",
    "/deploy-validate --environment dev --run_tests false"
  ],
  "output": {
    "success": "Comprehensive deployment validation report",
    "format": [
      "## Deployment Validation Report",
      "### Environment: ${environment}",
      "",
      "### 1. Test Results",
      "- Unit Tests: ${unit_test_results}",
      "- Integration Tests: ${integration_test_results}",
      "- Security Tests: ${security_test_results}",
      "- Performance Tests: ${performance_test_results}",
      "",
      "### 2. Configuration Status",
      "- Config Validation: ${config_status}",
      "- Environment Variables: ${env_status}",
      "- Secrets Management: ${secrets_status}",
      "",
      "### 3. Security Assessment",
      "- Vulnerability Scan: ${vuln_scan_results}",
      "- Dependency Audit: ${audit_results}",
      "- Security Score: ${security_score}/10",
      "",
      "### 4. Performance Metrics",
      "- Throughput: ${throughput_metrics}",
      "- Latency: ${latency_metrics}",
      "- Resource Usage: ${resource_metrics}",
      "",
      "### 5. Deployment Readiness",
      "- Overall Status: ${readiness_status}",
      "- Risk Assessment: ${risk_level}",
      "- Recommendations: ${recommendations}",
      "",
      "### 6. Pre-flight Checklist",
      "${checklist_status}"
    ]
  },
  "decision_gates": {
    "continue_deployment": {
      "criteria": [
        "All required tests passing",
        "Security score meets threshold",
        "Performance targets achieved",
        "No critical issues found"
      ]
    },
    "abort_deployment": {
      "criteria": [
        "Any required test failing",
        "Security vulnerabilities found",
        "Performance regression detected",
        "Configuration errors present"
      ]
    }
  },
  "post_actions": [
    "Generate deployment report",
    "Archive test results",
    "Update deployment log",
    "Notify team of status",
    "Prepare rollback if needed"
  ],
  "error_handling": {
    "config_error": "Configuration validation failed: ${error_details}",
    "invalid_environment": "Valid environments: dev, staging, prod",
    "security_failure": "Security validation failed: ${security_issues}",
    "test_failure": "Test suite failed: ${failed_tests}",
    "performance_regression": "Performance below threshold: ${metrics}",
    "dependency_conflict": "Dependency issues found: ${conflicts}"
  }
}