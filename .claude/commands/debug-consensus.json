{
  "name": "debug-consensus",
  "description": "Analyze QR-Avalanche consensus state and debug consensus issues",
  "agent": "consensus_agent",
  "context": {
    "agent_reference": "agents/consensus_agent.md",
    "algorithm": "QR-Avalanche",
    "consensus_tracking": {
      "voting_rounds": "Track voting progress across rounds",
      "finality_checkpoints": "Monitor finality achievement",
      "fork_detection": "Identify and analyze forks",
      "performance_analysis": "Measure consensus performance"
    }
  },
  "parameters": {
    "round": {
      "type": "number",
      "description": "Optional consensus round number to analyze",
      "required": false
    },
    "node": {
      "type": "string",
      "description": "Specific node ID to debug",
      "required": false
    },
    "verbose": {
      "type": "boolean",
      "description": "Enable verbose logging with detailed traces",
      "required": false,
      "default": false
    },
    "focus": {
      "type": "string",
      "description": "Debug focus area (voting, finality, forks, performance, conflicts)",
      "required": false,
      "options": ["voting", "finality", "forks", "performance", "conflicts", "all"]
    },
    "timeframe": {
      "type": "string",
      "description": "Time window for analysis (e.g., '5m', '1h', 'all')",
      "required": false,
      "default": "5m"
    }
  },
  "examples": [
    "/debug-consensus",
    "/debug-consensus --round 42 --verbose",
    "/debug-consensus --focus voting --timeframe 10m",
    "/debug-consensus --node node-123 --focus conflicts",
    "/debug-consensus --focus forks --verbose"
  ],
  "output": {
    "success": "QR-Avalanche consensus state analysis report",
    "format": [
      "1. QR-Avalanche Consensus Status",
      "   - Algorithm: QR-Avalanche",
      "   - Current round: {round}",
      "   - Network size: {nodes}",
      "   - Byzantine threshold: {f}",
      "   - Consensus health: {health_score}",
      "2. Voting Analysis",
      "   - Active voters: {voters}/{total}",
      "   - Vote distribution: {distribution}",
      "   - Missing votes: {missing_nodes}",
      "   - Vote conflicts: {conflicts}",
      "3. DAG State Tracking",
      "   - Total nodes: {dag_nodes}",
      "   - Finalized nodes: {finalized}",
      "   - Pending nodes: {pending}",
      "   - Orphaned nodes: {orphaned}",
      "   - Fork branches: {fork_count}",
      "4. Finality Information",
      "   - Last finalized: {block_id}",
      "   - Finality depth: {depth}",
      "   - Time to finality: {avg_time}",
      "   - Finality queue: {queue_size}",
      "5. Performance Metrics",
      "   - Consensus TPS: {tps}",
      "   - Vote latency: p50={p50}ms, p99={p99}ms",
      "   - Round duration: {avg_round}ms",
      "   - Message overhead: {msg_count}/round"
    ]
  },
  "debugging_sections": {
    "voting_debug": {
      "vote_propagation": "Trace vote message flow",
      "vote_validation": "Check vote signature and validity",
      "vote_aggregation": "Analyze vote counting logic",
      "vote_conflicts": "Identify conflicting votes"
    },
    "finality_debug": {
      "finality_rules": "Check finality conditions",
      "checkpoint_validation": "Verify checkpoint consistency",
      "reorg_analysis": "Analyze reorganizations",
      "finality_delays": "Identify finality bottlenecks"
    },
    "fork_debug": {
      "fork_detection": "Identify fork points",
      "fork_resolution": "Trace resolution process",
      "weight_calculation": "Verify branch weights",
      "preference_analysis": "Check node preferences"
    },
    "performance_debug": {
      "bottleneck_analysis": "Identify performance issues",
      "message_patterns": "Analyze message flow",
      "resource_usage": "Check CPU/memory usage",
      "network_delays": "Measure network latencies"
    }
  },
  "consensus_invariants": {
    "safety": [
      "No two honest nodes finalize conflicting blocks",
      "Finalized blocks form a chain",
      "Byzantine nodes cannot exceed threshold"
    ],
    "liveness": [
      "Consensus progresses under synchrony",
      "All honest transactions eventually finalize",
      "Network partitions heal correctly"
    ],
    "performance": [
      "Sub-second finality (99th percentile)",
      "Linear message complexity",
      "Bounded memory usage"
    ]
  },
  "error_handling": {
    "invalid_round": "Round number validation error - check valid range",
    "consensus_error": "Consensus state error - check invariants",
    "data_unavailable": "Required consensus data not available",
    "node_not_found": "Specified node ID not found in network",
    "invalid_focus": "Invalid focus area - use voting, finality, forks, performance, or conflicts",
    "timeframe_error": "Invalid timeframe format - use format like '5m', '1h', or 'all'"
  }
}