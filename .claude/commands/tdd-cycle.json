{
  "name": "tdd-cycle",
  "description": "Execute complete Test-Driven Development cycle for a feature",
  "workflow_file": "workflow/tdd_workflow.md",
  "parameters": {
    "module": {
      "type": "string",
      "description": "Target module name (e.g., crypto, dag, network)",
      "required": true
    },
    "feature": {
      "type": "string", 
      "description": "Feature name to implement",
      "required": true
    }
  },
  "agent_mapping": {
    "crypto": "agents/crypto_agent.md",
    "network": "agents/network_agent.md", 
    "dag": "agents/consensus_agent.md",
    "consensus": "agents/consensus_agent.md",
    "protocol": "agents/integration_agent.md",
    "security": "agents/security_agent.md",
    "performance": "agents/performance_agent.md"
  },
  "prompt_template": {
    "RED": "As the {agent_role}, create a failing test for {feature} in the {module} module. The test should compile but fail, clearly documenting expected behavior. Follow TDD RED phase principles.",
    "GREEN": "As the {agent_role}, implement minimal code to make the test for {feature} pass. Focus on functionality over elegance. Follow TDD GREEN phase principles.",
    "REFACTOR": "As the {agent_role}, refactor the implementation of {feature} while maintaining passing tests. Apply coding standards, optimize if needed, and ensure security requirements are met."
  },
  "context_files": [
    "contexts/test_status.md",
    "contexts/security_context.md",
    "contexts/performance_context.md",
    "contexts/integration_context.md"
  ],
  "phases": [
    {
      "name": "RED",
      "description": "Write failing test first",
      "prompts": {
        "test_creation": "Create a test that captures the expected behavior of {feature}. The test must compile but fail initially.",
        "validation": "Verify the test fails for the right reason and documents expected behavior clearly."
      },
      "success_criteria": [
        "Test compiles without errors",
        "Test fails when run",
        "Expected behavior is clearly documented",
        "Test follows project conventions"
      ]
    },
    {
      "name": "GREEN", 
      "description": "Write minimal code to pass test",
      "prompts": {
        "implementation": "Implement the minimal code necessary to make the test for {feature} pass.",
        "validation": "Run the test to verify it now passes with your implementation."
      },
      "success_criteria": [
        "Test passes",
        "Implementation is minimal",
        "No premature optimization",
        "Code compiles without warnings"
      ]
    },
    {
      "name": "REFACTOR",
      "description": "Improve code while keeping tests green",
      "prompts": {
        "refactoring": "Refactor the implementation of {feature} to improve code quality, apply standards, and optimize if needed.",
        "validation": "Ensure all tests still pass after refactoring and code meets project standards."
      },
      "success_criteria": [
        "All tests still pass",
        "Code meets style guidelines",
        "Performance targets met",
        "Security requirements satisfied"
      ]
    }
  ],
  "examples": [
    "/tdd-cycle crypto ml_kem_implementation",
    "/tdd-cycle network peer_discovery",
    "/tdd-cycle dag consensus_finality"
  ],
  "output": {
    "success": "Test suite passed and feature implementation complete",
    "format": [
      "1. Test Creation (RED Phase)",
      "2. Initial Test Failure Verification",
      "3. Implementation (GREEN Phase)", 
      "4. Refactoring (REFACTOR Phase)",
      "5. Final Test Status and Coverage"
    ]
  },
  "error_handling": {
    "test_failure": "Details of failing tests with suggestions",
    "invalid_module": "List of valid module names from agent_mapping",
    "compilation_error": "Build errors with debug information",
    "phase_failure": "Guidance for recovering from phase-specific failures"
  }
}